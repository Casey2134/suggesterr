# Generated by Django 4.2.7 on 2025-07-19 18:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRecommendationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('popular_vs_niche_balance', models.FloatField(default=0.5, help_text='0=all niche, 1=all popular')),
                ('genre_diversity', models.FloatField(default=0.7, help_text='How much to vary genres')),
                ('release_year_preference', models.FloatField(default=0.5, help_text='0=older, 1=newer')),
                ('runtime_flexibility', models.FloatField(default=0.6, help_text='Strict vs flexible runtime matching')),
                ('movie_weight', models.FloatField(default=0.5, help_text='0=TV only, 1=Movies only')),
                ('include_rewatches', models.BooleanField(default=False, help_text='Include already watched')),
                ('auto_refresh_days', models.IntegerField(default=7, help_text='Auto-refresh recommendations')),
                ('last_refreshed', models.DateTimeField(auto_now_add=True)),
                ('minimum_rating', models.FloatField(default=6.0, help_text='Minimum TMDB rating')),
                ('prefer_recent_releases', models.BooleanField(default=True)),
                ('prefer_highly_rated', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='smart_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferenceLearning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_weights', models.JSONField(default=dict, help_text='Learned genre preference weights')),
                ('actor_preferences', models.JSONField(default=dict, help_text='Actor preference scores')),
                ('director_preferences', models.JSONField(default=dict, help_text='Director preference scores')),
                ('runtime_preferences', models.JSONField(default=dict, help_text='Preferred runtime ranges by content type')),
                ('release_year_preferences', models.JSONField(default=dict, help_text='Release year preference patterns')),
                ('rating_threshold_learned', models.FloatField(default=6.0, help_text='Learned minimum rating preference')),
                ('popularity_preference', models.FloatField(default=0.5, help_text='Learned popular vs niche preference')),
                ('learning_confidence', models.FloatField(default=0.0, help_text='Confidence in learned preferences (0-1)')),
                ('data_points_analyzed', models.IntegerField(default=0, help_text='Number of data points used for learning')),
                ('last_learning_update', models.DateTimeField(auto_now=True)),
                ('learning_algorithm_version', models.CharField(default='1.0', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_learning', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TVShowSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show1_tmdb_id', models.IntegerField(db_index=True)),
                ('show2_tmdb_id', models.IntegerField(db_index=True)),
                ('similarity_score', models.FloatField(help_text='Cosine similarity score (0.0 - 1.0)')),
                ('genre_similarity', models.FloatField(default=0.0)),
                ('cast_similarity', models.FloatField(default=0.0)),
                ('creator_similarity', models.FloatField(default=0.0)),
                ('rating_similarity', models.FloatField(default=0.0)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('algorithm_version', models.CharField(default='1.0', max_length=10)),
            ],
            options={
                'indexes': [models.Index(fields=['show1_tmdb_id', 'similarity_score'], name='smart_recom_show1_t_0c52d3_idx'), models.Index(fields=['show2_tmdb_id', 'similarity_score'], name='smart_recom_show2_t_509246_idx')],
                'unique_together': {('show1_tmdb_id', 'show2_tmdb_id')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_preferences', models.JSONField(default=dict, help_text='Genre preferences based on user behavior')),
                ('preferred_actors', models.JSONField(default=list, help_text='List of preferred actor names')),
                ('preferred_directors', models.JSONField(default=list, help_text='List of preferred director names')),
                ('avg_preferred_runtime_movie', models.IntegerField(blank=True, null=True)),
                ('avg_preferred_runtime_tv', models.IntegerField(blank=True, null=True)),
                ('avg_user_rating', models.FloatField(default=0.0)),
                ('rating_count', models.IntegerField(default=0)),
                ('preferred_decade_start', models.IntegerField(blank=True, null=True)),
                ('preferred_decade_end', models.IntegerField(blank=True, null=True)),
                ('total_movies_watched', models.IntegerField(default=0)),
                ('total_tv_shows_watched', models.IntegerField(default=0)),
                ('watchlist_size', models.IntegerField(default=0)),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('analysis_version', models.CharField(default='1.0', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MovieSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie1_tmdb_id', models.IntegerField(db_index=True)),
                ('movie2_tmdb_id', models.IntegerField(db_index=True)),
                ('similarity_score', models.FloatField(help_text='Cosine similarity score (0.0 - 1.0)')),
                ('genre_similarity', models.FloatField(default=0.0)),
                ('cast_similarity', models.FloatField(default=0.0)),
                ('director_similarity', models.FloatField(default=0.0)),
                ('rating_similarity', models.FloatField(default=0.0)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('algorithm_version', models.CharField(default='1.0', max_length=10)),
            ],
            options={
                'indexes': [models.Index(fields=['movie1_tmdb_id', 'similarity_score'], name='smart_recom_movie1__6f0a25_idx'), models.Index(fields=['movie2_tmdb_id', 'similarity_score'], name='smart_recom_movie2__a45aae_idx')],
                'unique_together': {('movie1_tmdb_id', 'movie2_tmdb_id')},
            },
        ),
        migrations.CreateModel(
            name='ContentFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('movie', 'Movie'), ('tv', 'TV Show')], max_length=10)),
                ('tmdb_id', models.IntegerField()),
                ('genre_vector', models.JSONField(default=dict, help_text='Genre representation vector')),
                ('cast_features', models.JSONField(default=list, help_text='Main cast members')),
                ('crew_features', models.JSONField(default=dict, help_text='Director, writer, etc.')),
                ('popularity_percentile', models.FloatField(default=0.0, help_text='Popularity percentile (0-100)')),
                ('rating_percentile', models.FloatField(default=0.0, help_text='Rating percentile (0-100)')),
                ('niche_score', models.FloatField(default=0.0, help_text='How niche/hidden gem this content is')),
                ('runtime_category', models.CharField(blank=True, choices=[('short', 'Short (<90 min)'), ('medium', 'Medium (90-150 min)'), ('long', 'Long (>150 min)')], max_length=20, null=True)),
                ('release_era', models.CharField(blank=True, choices=[('classic', 'Classic (<1980)'), ('retro', 'Retro (1980-1999)'), ('modern', 'Modern (2000-2010)'), ('contemporary', 'Contemporary (2010+)')], max_length=20, null=True)),
                ('features_computed_at', models.DateTimeField(auto_now=True)),
                ('feature_version', models.CharField(default='1.0', max_length=10)),
            ],
            options={
                'indexes': [models.Index(fields=['content_type', 'popularity_percentile'], name='smart_recom_content_5af03a_idx'), models.Index(fields=['content_type', 'rating_percentile'], name='smart_recom_content_28dc30_idx'), models.Index(fields=['content_type', 'niche_score'], name='smart_recom_content_6873d3_idx')],
                'unique_together': {('content_type', 'tmdb_id')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_date', models.DateTimeField(auto_now_add=True)),
                ('total_recommendations', models.IntegerField(help_text='Total recommendations shown')),
                ('positive_feedback', models.IntegerField(default=0)),
                ('negative_feedback', models.IntegerField(default=0)),
                ('items_added_to_watchlist', models.IntegerField(default=0)),
                ('items_requested', models.IntegerField(default=0)),
                ('items_clicked', models.IntegerField(default=0)),
                ('avg_recommendation_score', models.FloatField(default=0.0)),
                ('algorithm_settings_snapshot', models.JSONField(help_text='Settings used for this session')),
                ('algorithm_version', models.CharField(default='1.0', max_length=50)),
                ('success_rate', models.FloatField(default=0.0, help_text='Percentage of positive interactions')),
                ('diversity_score', models.FloatField(default=0.0, help_text='Genre/content diversity in recommendations')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_quality', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'session_date'], name='smart_recom_user_id_16a063_idx'), models.Index(fields=['success_rate'], name='smart_recom_success_961f3c_idx')],
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('movie', 'Movie'), ('tv', 'TV Show')], max_length=10)),
                ('tmdb_id', models.IntegerField()),
                ('feedback_type', models.CharField(choices=[('positive', 'Liked'), ('negative', 'Disliked'), ('not_interested', 'Not Interested'), ('added_to_watchlist', 'Added to Watchlist'), ('requested', 'Requested'), ('watched', 'Watched')], max_length=20)),
                ('detailed_reason', models.CharField(blank=True, choices=[('not_my_genre', 'Not My Genre'), ('already_seen', 'Already Seen'), ('poor_quality', 'Poor Quality/Rating'), ('wrong_mood', 'Wrong Mood'), ('too_old', 'Too Old'), ('too_new', 'Too New'), ('runtime', 'Runtime Issue'), ('inappropriate', 'Inappropriate Content'), ('language', 'Language Preference'), ('availability', 'Not Available')], max_length=50, null=True)),
                ('additional_feedback', models.TextField(blank=True, help_text='Optional user comment')),
                ('recommendation_explanation', models.TextField(help_text='Why it was recommended (for analysis)')),
                ('recommendation_score', models.FloatField(help_text='Original recommendation score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_settings_at_time', models.JSONField(default=dict, help_text='User settings when feedback given')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'feedback_type'], name='smart_recom_user_id_ba2f18_idx'), models.Index(fields=['tmdb_id', 'content_type', 'feedback_type'], name='smart_recom_tmdb_id_4a8db5_idx'), models.Index(fields=['created_at'], name='smart_recom_created_156cfa_idx')],
                'unique_together': {('user', 'tmdb_id', 'content_type')},
            },
        ),
        migrations.CreateModel(
            name='CachedRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('movie', 'Movie'), ('tv', 'TV Show')], max_length=10)),
                ('tmdb_id', models.IntegerField()),
                ('score', models.DecimalField(decimal_places=3, help_text='Final recommendation score', max_digits=5)),
                ('explanation', models.TextField(help_text='Why this was recommended')),
                ('recommendation_type', models.CharField(choices=[('popular', 'Popular Pick'), ('niche', 'Hidden Gem'), ('similar', 'Similar to Your Taste'), ('trending', 'Trending Now'), ('classic', 'Classic Pick'), ('recent', 'New Release')], max_length=20)),
                ('content_score', models.FloatField(default=0.0, help_text='Content-based similarity score')),
                ('popularity_score', models.FloatField(default=0.0, help_text='Popularity-based score')),
                ('user_preference_score', models.FloatField(default=0.0, help_text='User preference alignment score')),
                ('diversity_bonus', models.FloatField(default=0.0, help_text='Diversity injection bonus')),
                ('algorithm_version', models.CharField(default='1.0', max_length=50)),
                ('user_settings_hash', models.CharField(help_text='Hash of user settings when generated', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this recommendation expires')),
                ('viewed', models.BooleanField(default=False)),
                ('clicked', models.BooleanField(default=False)),
                ('added_to_watchlist', models.BooleanField(default=False)),
                ('requested', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cached_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score', '-created_at'],
                'indexes': [models.Index(fields=['user', 'expires_at'], name='smart_recom_user_id_cbccc4_idx'), models.Index(fields=['user', 'score'], name='smart_recom_user_id_72040d_idx'), models.Index(fields=['user', 'content_type', 'recommendation_type'], name='smart_recom_user_id_129932_idx')],
                'unique_together': {('user', 'tmdb_id', 'content_type')},
            },
        ),
    ]
